#!/bin/bash

DEFAULT_INSTALL=true
BINARY_INSTALL=false

install_deps()
{
  # Build tools:
  sudo apt-get install -y build-essential

  # GUI (if you want to use GTK instead of Qt, replace 'qt5-default' with 'libgtkglext1-dev' and remove '-DWITH_QT=ON' option in CMake):
  sudo apt-get install -y qt5-default libvtk6-dev

  # Media I/O:
  sudo apt-get install -y zlib1g-dev libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev

  # Video I/O:
  sudo apt-get install -y libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev

  # Parallelism and linear algebra libraries:
  sudo apt-get install -y libtbb-dev libeigen3-dev

  # Python:
  sudo apt-get install -y python-dev python-tk python-numpy python3-dev python3-tk python3-numpy

  # Java:
  sudo apt-get install -y ant default-jdk

  # Documentation:
  sudo apt-get install -y doxygen
}


install_binary()
{
  echo "Install opencv..."

  # TODO: only installed 3.2, not available for 3.4
  sudo apt-get install libopencv-dev python-opencv
}

#
# Build opencv
#
build_from_src()
{
  local TARGET_DIR=$1
  cd $TARGET_DIR

  echo "Build opencv ..."

  if [[ ! -d opencv ]]
  then
    git clone https://github.com/opencv/opencv.git -b 3.4.2
  fi
  if [[ ! -d opencv_contrib ]]
  then
    git clone https://github.com/opencv/opencv_contrib.git -b 3.4.2
  fi

  cd opencv

  # pre-download ippicv, fix "IPPICV: Download failed: 28; Timeout was reached"
  mkdir -p .cache/ippicv
  wget -c https://raw.githubusercontent.com/opencv/opencv_3rdparty/ippicv/master_20180518/ippicv/ippicv_2017u3_lnx_intel64_general_20180518.tgz -O .cache/ippicv/b7cc351267db2d34b9efa1cd22ff0572-ippicv_2017u3_lnx_intel64_general_20180518.tgz

  mkdir -p build
  cd build
  cmake -DOPENCV_EXTRA_MODULES_PATH="${TARGET_DIR}"/opencv_contrib/modules -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_opencv_cnn_3dobj=OFF ..
  make -j8
  sudo make install
  sudo ldconfig
}


#
# Main entry to build deps
#
main()
{
  if [[ "$DEFAULT_INSTALL" != "true" ]]; then
    echo "Default not install, skip"
    exit
  fi

  CURRENT_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")

  if [[ "$BINARY_INSTALL" == "true" ]]; then
    install_binary
  else
    TARGET_DIR=${1}
    if [ ! -d "${TARGET_DIR}" ]; then
      mkdir -p "${TARGET_DIR}"
      echo "No such directory, create \"${TARGET_DIR}\""
    fi
    install_deps
    build_from_src "${TARGET_DIR}"
  fi
}

main "$@"
