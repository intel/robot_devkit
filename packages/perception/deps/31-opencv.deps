#!/bin/bash
# Reference: https://docs.opencv.org/3.4.2/d7/d9f/tutorial_linux_install.html

set -e

DEFAULT_INSTALL=true
BINARY_INSTALL=false

install_opencv_binary()
{
  echo "Install opencv..."

  # TODO: only installed 3.2, not available for 3.4
  sudo apt-get install libopencv-dev python-opencv
}

install_opencv_deps()
{

  # compiler
  sudo apt-get install -y build-essential

  # required
  sudo apt-get install -y cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev

  # optional
  sudo apt-get install -y python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev
}

#
# Build opencv
#
build_from_src()
{
  local TARGET_DIR=$1
  cd "$TARGET_DIR"

  echo "Build opencv ..."

  if [[ ! -d opencv ]]
  then
    git clone --depth 1 https://github.com/opencv/opencv.git -b 3.4.2
  fi
  if [[ ! -d opencv_contrib ]]
  then
    git clone --depth 1 https://github.com/opencv/opencv_contrib.git -b 3.4.2
  fi

  cd opencv

  # TODO: pre-download ippicv, fix "Download failed: 28; Timeout was reached"
  # Use clone instead of wget to increase download speed
  if [[ ! -d .cache/ippicv_download ]]
  then
    git clone --depth 1 https://github.com/opencv/opencv_3rdparty -b ippicv/master_20180518 .cache/ippicv_download
  fi
  mkdir -p .cache/ippicv
  cp -rvf .cache/ippicv_download/ippicv/ippicv_2017u3_lnx_intel64_general_20180518.tgz .cache/ippicv/b7cc351267db2d34b9efa1cd22ff0572-ippicv_2017u3_lnx_intel64_general_20180518.tgz
  
  # TODO: pre-download data model, fix "Download failed: 28; Timeout was reached"
  if [[ ! -d .cache/data_download ]]
  then
    git clone --depth 1 https://github.com/opencv/opencv_3rdparty -b contrib_face_alignment_20170818 .cache/data_download
  fi
  mkdir -p .cache/data
  cp -rvf .cache/data_download/face_landmark_model.dat .cache/data/7505c44ca4eb54b4ab1e4777cb96ac05-face_landmark_model.dat

  # TODO: pre-download xfeatures2d, fix "Download failed: 35;"SSL connect error"
  # Reference: opencv_contrib/modules/xfeatures2d/cmake/download_boostdesc.cmake
  if [[ ! -d .cache/xfeatures2d/boostdesc ]]; then
    mkdir -p .cache/xfeatures2d/boostdesc
    cd .cache/xfeatures2d/boostdesc
    echo "Pre-download xfeatures2d bootstdesc to .cache"
    wget -t 3 -c https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_bgm.i -O 0ea90e7a8f3f7876d450e4149c97c74f-boostdesc_bgm.i
    wget -t 3 -c https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_bgm_bi.i -O 232c966b13651bd0e46a1497b0852191-boostdesc_bgm_bi.i
    wget -t 3 -c https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_bgm_hd.i -O 324426a24fa56ad9c5b8e3e0b3e5303e-boostdesc_bgm_hd.i
    wget -t 3 -c https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_binboost_064.i -O 202e1b3e9fec871b04da31f7f016679f-boostdesc_binboost_064.i
    wget -t 3 -c https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_binboost_128.i -O 98ea99d399965c03d555cef3ea502a0b-boostdesc_binboost_128.i
    wget -t 3 -c https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_binboost_256.i -O e6dcfa9f647779eb1ce446a8d759b6ea-boostdesc_binboost_256.i
    wget -t 3 -c https://raw.githubusercontent.com/opencv/opencv_3rdparty/34e4206aef44d50e6bbcd0ab06354b52e7466d26/boostdesc_lbgm.i -O 0ae0675534aa318d9668f2a179c2a052-boostdesc_lbgm.i
  fi
  # Reference: opencv_contrib/modules/xfeatures2d/cmake/download_vgg.cmake
  cd "$TARGET_DIR/opencv"
  if [[ ! -d .cache/xfeatures2d/vgg ]]; then
    mkdir -p .cache/xfeatures2d/vgg
    cd .cache/xfeatures2d/vgg
    echo "Pre-download xfeatures2d vgg to .cache"
    wget -t 3 -c https://raw.githubusercontent.com/opencv/opencv_3rdparty/fccf7cd6a4b12079f73bbfb21745f9babcd4eb1d/vgg_generated_48.i -O e8d0dcd54d1bcfdc29203d011a797179-vgg_generated_48.i
    wget -t 3 -c https://raw.githubusercontent.com/opencv/opencv_3rdparty/fccf7cd6a4b12079f73bbfb21745f9babcd4eb1d/vgg_generated_64.i -O 7126a5d9a8884ebca5aea5d63d677225-vgg_generated_64.i
    wget -t 3 -c https://raw.githubusercontent.com/opencv/opencv_3rdparty/fccf7cd6a4b12079f73bbfb21745f9babcd4eb1d/vgg_generated_80.i -O 7cd47228edec52b6d82f46511af325c5-vgg_generated_80.i
    wget -t 3 -c https://raw.githubusercontent.com/opencv/opencv_3rdparty/fccf7cd6a4b12079f73bbfb21745f9babcd4eb1d/vgg_generated_120.i -O 151805e03568c9f490a5e3a872777b75-vgg_generated_120.i
  fi

  cd "$TARGET_DIR/opencv"
  mkdir -p build
  cd build
  cmake -DOPENCV_EXTRA_MODULES_PATH="${TARGET_DIR}"/opencv_contrib/modules -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_opencv_cnn_3dobj=OFF ..
  make -j8
  sudo make install
  sudo ldconfig
}

release_package()
{
  echo "Install opencv to rootfs"
  SOURCE_DIR=$1
  RELEASE_DIR=$2

  cd "${SOURCE_DIR}"/opencv/build
  sudo make install DESTDIR="${RELEASE_DIR}"/rootfs

  # add install command to install.sh
  declare -f install_opencv_deps >> "${RELEASE_DIR}"/install.sh
  echo "install_opencv_deps" >> "${RELEASE_DIR}"/install.sh
}

#
# Main entry to build deps
#
main()
{
  if [[ "$DEFAULT_INSTALL" != "true" ]]; then
    echo "Default not install, skip"
    exit
  fi

  TARGET_DIR=${1}
  RELEASE_OPT=${2}
  RELEASE_DIR=${3}

  if [[ "$BINARY_INSTALL" == "true" ]]; then
    install_opencv_binary
  else
    if [ ! -d "${TARGET_DIR}" ]; then
      mkdir -p "${TARGET_DIR}"
      echo "No such directory, create \"${TARGET_DIR}\""
    fi

    # Install files to rootfs with --release
    if [[ "$RELEASE_OPT" == "--release" && "$RELEASE_DIR" != "" ]];then
      release_package "${TARGET_DIR}" "${RELEASE_DIR}"
      exit
    fi

    install_opencv_deps
    build_from_src "${TARGET_DIR}"

  fi
}

main "$@"
