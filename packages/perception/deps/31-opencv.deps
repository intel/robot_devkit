#!/bin/bash
# Reference: https://docs.opencv.org/3.4.2/d7/d9f/tutorial_linux_install.html

set -e

DEFAULT_INSTALL=true
BINARY_INSTALL=false

install_opencv_binary()
{
  echo "Install opencv..."

  # TODO: only installed 3.2, not available for 3.4
  sudo apt-get install libopencv-dev python-opencv
}

install_opencv_deps()
{

  # compiler
  sudo apt-get install -y build-essential

  # required
  sudo apt-get install -y cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev

  # optional
  sudo apt-get install -y python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev
}

#
# Build opencv
#
build_from_src()
{
  local TARGET_DIR=$1
  cd "$TARGET_DIR"

  echo "Build opencv ..."

  if [[ ! -d opencv ]]
  then
    git clone --depth 1 https://github.com/opencv/opencv.git -b 3.4.2
  fi
  if [[ ! -d opencv_contrib ]]
  then
    git clone --depth 1 https://github.com/opencv/opencv_contrib.git -b 3.4.2
  fi

  cd opencv

  # TODO: pre-download ippicv, fix "Download failed: 28; Timeout was reached"
  # Use clone instead of wget to reduce download time
  if [[ ! -f .cache/ippicv/b7cc351267db2d34b9efa1cd22ff0572-ippicv_2017u3_lnx_intel64_general_20180518.tgz ]]
  then
    rm -rf .cache/ippicv_download
    git clone --depth 1 https://github.com/opencv/opencv_3rdparty -b ippicv/master_20180518 .cache/ippicv_download
    mkdir -p .cache/ippicv
    cp -rvf .cache/ippicv_download/ippicv/ippicv_2017u3_lnx_intel64_general_20180518.tgz .cache/ippicv/b7cc351267db2d34b9efa1cd22ff0572-ippicv_2017u3_lnx_intel64_general_20180518.tgz
  fi

  cd "$TARGET_DIR/opencv"
  mkdir -p build
  cd build
  # Build modules only required by robotic_devkit compoments, saving installation time.
  #  ros2_object_analytics: highgui,videoio,tracking,plot
  #  ros2_openvino_toolkit: highgui,videoio,imgproc
  #  ros2_grasp_library:    imgproc,core,aruco,calib3d,imgcodecs
  OPENCV_BUILD_LIST="core,highgui,videoio,tracking,plot,imgproc,aruco,calib3d,imgcodecs"
  cmake -DOPENCV_EXTRA_MODULES_PATH="${TARGET_DIR}"/opencv_contrib/modules \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DBUILD_opencv_cnn_3dobj=OFF \
    -DBUILD_LIST=$OPENCV_BUILD_LIST \
    "${TARGET_DIR}/opencv"
  make -j8
  sudo make install
  sudo ldconfig
}

release_package()
{
  echo "Install opencv to rootfs"
  SOURCE_DIR=$1
  RELEASE_DIR=$2

  cd "${SOURCE_DIR}"/opencv/build
  sudo make install DESTDIR="${RELEASE_DIR}"/rootfs

  # add install command to install.sh
  declare -f install_opencv_deps >> "${RELEASE_DIR}"/install.sh
  echo "install_opencv_deps" >> "${RELEASE_DIR}"/install.sh
}

#
# Main entry to build deps
#
main()
{
  if [[ "$DEFAULT_INSTALL" != "true" ]]; then
    echo "Default not install, skip"
    exit
  fi

  TARGET_DIR=${1}
  RELEASE_OPT=${2}
  RELEASE_DIR=${3}

  if [[ "$BINARY_INSTALL" == "true" ]]; then
    install_opencv_binary
  else
    if [ ! -d "${TARGET_DIR}" ]; then
      mkdir -p "${TARGET_DIR}"
      echo "No such directory, create \"${TARGET_DIR}\""
    fi

    # Install files to rootfs with --release
    if [[ "$RELEASE_OPT" == "--release" && "$RELEASE_DIR" != "" ]];then
      release_package "${TARGET_DIR}" "${RELEASE_DIR}"
      exit
    fi

    install_opencv_deps
    build_from_src "${TARGET_DIR}"

  fi
}

main "$@"
