#!/bin/bash
################################################################################
#
# Copyright (c) 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################

DEFAULT_INSTALL=true



# Ref to https://index.ros.org/doc/ros2/Installation/Linux-Development-Setup/

# Set Locale
# sudo locale-gen en_US en_US.UTF-8
# sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
# export LANG=en_US.UTF-8

add_apt_repo()
{
  # Add the ROS 2 apt repository
  # sudo apt update
  sudo apt install -y curl gnupg2 lsb-release python-rosdep wget

  curl http://repo.ros2.org/repos.key | sudo apt-key add -
  sudo sh -c 'echo "deb [arch=amd64,arm64] http://packages.ros.org/ros2/ubuntu `lsb_release -cs` main" > /etc/apt/sources.list.d/ros2-latest.list'

  CURRENT_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
  sudo apt-key add ${CURRENT_DIR}/10-F42ED6FBAB17C654

  sudo apt update
  sudo apt install -y build-essential cmake git wget

  sudo apt install -y python3-lark-parser python3-colcon-common-extensions python3-vcstool

  # Install development tools and ROS tools
  #sudo apt update && sudo apt install -y \
  #  python3-colcon-common-extensions \
  #  python3-pip \
  #  python-rosdep \
  #  python3-vcstool \
  #  wget
  # install some pip packages needed for testing
  #python3 -m pip install -U \
  #  argcomplete \
  #  flake8 \
  #  flake8-blind-except \
  #  flake8-builtins \
  #  flake8-class-newline \
  #  flake8-comprehensions \
  #  flake8-deprecated \
  #  flake8-docstrings \
  #  flake8-import-order \
  #  flake8-quotes \
  #  pytest-repeat \
  #  pytest-rerunfailures \
  #  pytest \
  #  pytest-cov \
  #  pytest-runner \
  #  setuptools
  ## install Fast-RTPS dependencies
  #sudo apt install --no-install-recommends -y \
  #  libasio-dev \
  #  libtinyxml2-dev
}

install_ros2_deps()
{

  # TODO: Install rti_connext-dds
  # sudo apt install -q -y rti-connext-dds-5.3.1

# auto-generated by tools/update_rosdep_list.sh
# [apt] Installation commands:
  sudo -H apt-get install -y libeigen3-dev
  sudo -H apt-get install -y python3-lxml
  sudo -H apt-get install -y libtinyxml2-dev
  sudo -H apt-get install -y qtbase5-dev
  sudo -H apt-get install -y libfreetype6
  sudo -H apt-get install -y python3-matplotlib
  sudo -H apt-get install -y libfreetype6-dev
  sudo -H apt-get install -y libyaml-dev
  sudo -H apt-get install -y libconsole-bridge-dev
  sudo -H apt-get install -y libcurl4-openssl-dev
  sudo -H apt-get install -y curl
  sudo -H apt-get install -y libxaw7-dev
  sudo -H apt-get install -y libcppunit-dev
  sudo -H apt-get install -y libpcre3-dev
  sudo -H apt-get install -y cmake
  sudo -H apt-get install -y clang-format
  sudo -H apt-get install -y libgl1-mesa-dev
  sudo -H apt-get install -y libglu1-mesa-dev
  sudo -H apt-get install -y python3-lark-parser
  sudo -H apt-get install -y libxml2-utils
  sudo -H apt-get install -y pyqt5-dev
  sudo -H apt-get install -y python3-pyqt5
  sudo -H apt-get install -y python3-pyqt5.qtsvg
  sudo -H apt-get install -y python3-sip-dev
  sudo -H apt-get install -y python3-pygraphviz
  sudo -H apt-get install -y python3-flake8
  sudo -H apt-get install -y pyflakes3
  sudo -H apt-get install -y cppcheck
  sudo -H apt-get install -y libxrandr-dev
  sudo -H apt-get install -y libqt5core5a
  sudo -H apt-get install -y qt5-qmake
  sudo -H apt-get install -y python3-pkg-resources
  sudo -H apt-get install -y python3-psutil
  sudo -H apt-get install -y libopencv-dev
  sudo -H apt-get install -y libsqlite3-dev
  sudo -H apt-get install -y python3-pydot
  sudo -H apt-get install -y libtinyxml-dev
  sudo -H apt-get install -y python3-yaml
  sudo -H apt-get install -y uncrustify
  sudo -H apt-get install -y tango-icon-theme
  sudo -H apt-get install -y libqt5opengl5
  sudo -H apt-get install -y python3-mock
  sudo -H apt-get install -y python3-pytest
  sudo -H apt-get install -y openssl
  sudo -H apt-get install -y python3-pep8
  sudo -H apt-get install -y libqt5widgets5
  sudo -H apt-get install -y libassimp-dev
  sudo -H apt-get install -y libpoco-dev
  sudo -H apt-get install -y pydocstyle
  sudo -H apt-get install -y zlib1g-dev
  sudo -H apt-get install -y python3-empy
  sudo -H apt-get install -y libx11-dev
  sudo -H apt-get install -y libqt5gui5
  sudo -H apt-get install -y liblog4cxx-dev
  sudo -H apt-get install -y python3-setuptools
  sudo -H apt-get install -y python3-numpy
  sudo -H apt-get install -y pkg-config
  sudo -H apt-get install -y python3-catkin-pkg-modules

}

install_ros2_core()
{
  #  https://github.com/ros2/ros2/releases/download/release-crystal-20190408/ros2-crystal-20190408-linux-bionic-amd64.tar.bz2
  #!/bin/bash

  if [ ! -d "${TARGET_DIR}" ]; then
    mkdir -p "${TARGET_DIR}"
    echo "No such directory, create \"${TARGET_DIR}\""
  fi

  cd $TARGET_DIR

  url=https://github.com/ros2/ros2/releases/download/release-dashing-20190531/ros2-dashing-20190531-linux-bionic-amd64.tar.bz2

  echo "Install ros2 core to $TARGET_DIR"
  mkdir -p ros2-linux_download
  cd ros2-linux_download
  wget -c $url
  echo "Extract ros2 tarball ..."
  tar xf `basename $url` -C ../
}

rename_workspace_path()
{
  # the INTERFACE_INCLUDE_DIRECTORIES and INTERFACE_LINK_LIBRARIES from extracted ros2 tarball point to jenkins-agent workspace,
  # which is not correct for local system. Rename the workspace path to local installed path.
  ROS2_DIR=${1}/ros2-linux
  cd ${ROS2_DIR}
  find -name "*.cmake" | xargs perl -pi -e "s|/home/jenkins-agent/workspace/ci_packaging_linux/ws/install|${ROS2_DIR}|g"
}

function main()
{

  if [[ "$DEFAULT_INSTALL" != "true" ]]; then
    echo "Default not install, skip"
    exit
  fi

  TARGET_DIR=$1
  if [[ "$TARGET_DIR" == "" ]]; then
    echo "TARGET_DIR not set, exit"
    exit
  fi

  add_apt_repo
  install_ros2_deps
  install_ros2_core "${TARGET_DIR}"
  rename_workspace_path "${TARGET_DIR}"
}

main "$@"
